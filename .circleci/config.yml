version: 2 # use CircleCI 2.0

jobs: # a collection of steps
  build: # runs not using Workflows must have a `build` job as entry point
    docker: # run the steps with Docker 
      - image: circleci/php:7.0-node-browsers
      - image: circleci/php:7.1-node-browsers
      - image: circleci/php:7.2-node-browsers
      - image: circleci/php:7.3-node-browsers # ...with this image as the primary container; this is where all `steps` will run
      - image: circleci/php:7.4-node-browsers
      - image: circleci/php:8.0-node-browsers
    working_directory: ~/repo # directory where steps will run
    steps: # a set of executable commands
      - checkout # special step to check out source code to working directory
      - run: sudo composer self-update
        #- restore_cache: # special step to restore the dependency cache if `composer.lock` does not change
        #keys:
        #- composer-v1-{{ checksum "composer.lock" }}
        # fallback to using the latest cache if no exact match is found (See https://circleci.com/docs/2.0/caching/)
        #- composer-v1-
      - run: composer install -n --prefer-dist
      - save_cache: # special step to save the dependency cache with the `composer.lock` cache key template
          key: composer-v1-{{ checksum "composer.lock" }}
          paths:
            - vendor
      # See https://circleci.com/docs/2.0/deployment-integrations/ for deploy examples
    # The resource_class feature allows configuring CPU and RAM resources for each job. Different resource classes are available for different executors. https://circleci.com/docs/2.0/configuration-reference/#resourceclass
    resource_class: large
